package TutorialThree;

import com.rabbitmq.client.*;

import java.io.IOException;

public class ReceiveLogs {
    private static final String EXCHANGE_NAME = "logs";

    public static void main(String[] argv) throws Exception {

        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        // idempotently declare the exchange
        channel.exchangeDeclare(EXCHANGE_NAME, "fanout");

        // calling queueDeclare with no parameters constructs a queue with the following properties:
        // - non durable: when the rabbit mq server is shutdown, the queue is deleted.
        // - exclusive: I think that means that this queue is just for this consumer
        // - auto delete: not sure what this means
        // - autogen name: the queue's name is auto generated by the server.
        String queueName = channel.queueDeclare().getQueue();

        // bind the queue to the exchange
        // binding can be thought of as "this queue is interested in the messages posted to this exchange"
        channel.queueBind(queueName, EXCHANGE_NAME, "");

        System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

        Consumer consumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope,
                                       AMQP.BasicProperties properties, byte[] body) throws IOException {
                String message = new String(body, "UTF-8");
                System.out.println(" [x] Received '" + message + "'");
            }
        };
        channel.basicConsume(queueName, true, consumer);
    }
}
